@model Hades.Web.ViewModels.UsuarioViewModel

@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_LayoutSemNavBar.cshtml";
}

<h4>Editar</h4>

@using (Html.BeginForm("EditConfirmed", "Usuario", FormMethod.Post, new { @class = "well" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <hr />
        @Html.HiddenFor(model => model.Id, new { htmlAttributes = new { @id = "Id" } })

        <div class="form-group">
            <label class="control-label col-md-2" style="color: black; font-weight: bold;">Nome</label>
            <div class="col-md-10">
                @Html.EditorFor(model => model.Nome, new { htmlAttributes = new { @class = "form-control", @id = "Nome" } })
            </div>
        </div>

        <div class="form-group">
            <label class="control-label col-md-2" style="color: black; font-weight: bold;">Email</label>
            <div class="col-md-10">
                @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control", @id = "Email" } })
            </div>
        </div>

        <div class="form-group">
            <label class="control-label col-md-2" style="color: black; font-weight: bold;">Data Cadastro</label>
            <div class="col-md-10">
                @Html.EditorFor(model => model.DataCadastro, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", @id = "DataCadastro" } })
            </div>
        </div>

        <div class="form-group">
            <label class="control-label col-md-2" style="color: black; font-weight: bold;">Senha  (Deve conter de 5 à 20 caracteres)</label>
            <div class="col-md-10">
                @Html.EditorFor(model => model.Senha, new { htmlAttributes = new { @class = "form-control", @id = "Senha" } })
            </div>
        </div>

        <div class="form-group">
            <input type="checkbox" id="Administrador" name="Administrador" @(Model.Administrador ? "checked" : string.Empty) />
            <label for="Administrador" style="color: black; font-weight: bold;">Administrador &nbsp;</label>

            <input type="checkbox" id="Ativo" name="Ativo" @(Model.Ativo ? "checked" : string.Empty) />
            <label for="Ativo" style="color: black; font-weight: bold;">Ativo</label>
        </div>
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Salvar" id="btnEditar" class="btn btn-default" style="border-radius: 20px; background-color: #1976d2; width:135px; " />
            </div>
        </div>
    </div>
}
<div style="margin-left: 110px; margin-top: -36px;">
    <button class="btn btn-defauld" onclick="escondeModal()" style="border-radius: 20px; background-color: #b71c1c; margin-left: 30px; ">Cancelar</button>
</div>
<p></p>

<script>
    function cancelar() {
        escondeModal();
    }

    $("#btnEditar").click(function (e) {
        e.preventDefault();

        var usuario =
        {
            Id: $("#Id").val(),
            Senha: $("#Senha").val(),
            Ativo: $("#Ativo").prop("checked"),
            Administrador: $("#Administrador").prop("checked"),
            Nome: $("#Nome").val(),
            Email: $("#Email").val(),
            DataCadastro: $("#DataCadastro").val()
        };
        console.log(usuario);
        $.post('@Url.Action("EditConfirmed", "Usuario")', { usuario: usuario })
        .done(function (data) {
            $('#divContentUsuario').modal('close');
            sucesso(data);
        }).fail(function (xhr) {
            erro(xhr.responseText);
        });
    });

    function sucesso(message) {
        Materialize.toast('' + message + '', 4000, 'rounded green');
        return true;
    }

    function erro(message) {
        Materialize.toast('' + message + '', 4000, 'rounded red');
        return true;
    }
    });

</script>